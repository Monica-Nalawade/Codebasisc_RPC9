Request 1

List of Products with base price > 500 and promo_type = BOGOF

SELECT  
	DISTINCT p.product_code, 
    p.product_name, 
	fact_events.base_price, 
    fact_events.promo_type
FROM 
	dim_products p 
INNER JOIN fact_events 
ON p.product_code = fact_events.product_code
WHERE base_price > 500
AND promo_type = 'BOGOF';

--------------------------------------------------------------------------------------------------------------------------------------------------
Request 2:

Report of number of stores in each city, sorted by descending order of no.of stores.
SELECT 
	city,
    count(store_id) as Store_Count
FROM
	dim_stores
GROUP BY city
ORDER BY Store_Count desc;
--------------------------------------------------------------------------------------------------------------------------------------------------
Request 3:

Campaign with revenue before and after promotion

## ----Adding and updating column `Rev_before_promo`
ALTER TABLE fact_events
	ADD Rev_before_promo float;
UPDATE fact_events
SET Rev_before_promo = base_price * `quantity_sold(before_promo)`;

## Adding column price_after_disc
ALTER TABLE fact_events
	ADD Base_Price_after_Disc float;
#--Updating price after discount
UPDATE fact_events
SET Base_Price_after_Disc = 
	CASE 
		WHEN promo_type='BOGOF' THEN `base_price`*0.5
		WHEN promo_type='50% OFF' THEN `base_price`*0.5
		WHEN promo_type='25% OFF' THEN `base_price`*0.75
		WHEN promo_type='33% OFF' THEN `base_price`*0.67
        WHEN promo_type='500 cashback' THEN `base_price` -500
		END
WHERE event_id IS NOT NULL;

-- Updating quanitity after promotion applied for BOGOF type

ALTER TABLE fact_events
ADD COLUMN `quantity_sold(after_promo_updated)` INT;
UPDATE fact_events
SET `quantity_sold(after_promo_updated)` = 
	CASE
	    WHEN promo_type = 'BOGOF' THEN `quantity_sold(after_promo)` * 2
	    ELSE `quantity_sold(after_promo)`
	END
WHERE event_id IS NOT NULL; 
#--- Revenue after promo aplied
ALTER TABLE fact_events
ADD COLUMN Rev_after_promo float;

UPDATE fact_events
SET Rev_after_promo = 
	CASE 
		WHEN promo_type='BOGOF' THEN `Base_Price_after_Disc`*`quantity_sold(after_promo_updated)`
		WHEN promo_type='50% OFF' THEN `Base_Price_after_Disc`*`quantity_sold(after_promo_updated)`
		WHEN promo_type='25% OFF' THEN `Base_Price_after_Disc`*`quantity_sold(after_promo_updated)`
		WHEN promo_type='33% OFF' THEN `Base_Price_after_Disc`*`quantity_sold(after_promo_updated)`
        WHEN promo_type='500 cashback' THEN `Base_Price_after_Disc`*`quantity_sold(after_promo_updated)`
	END
WHERE event_id IS NOT NULL; 


-- Calcualte the total revenue before and after promotion by campaign name
SELECT campaign_name,
       ROUND(SUM(`Rev_before_promo`)/1000000,2) as Revenue_before_promo_in_Millions,
       ROUND(SUM(`Rev_after_promo`)/1000000,2) as Revenue_after_promo_in_Millions
FROM fact_events
JOIN dim_campaigns USING (campaign_id)
GROUP BY campaign_name;
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
Request 4:

Calculate Incremental Sold Unit(ISU%) for each category in Diwali campaign. Provide ranking based on ISU%.

WITH Top_category AS (
    SELECT 
        category,
        100 * (SUM(`quantity_sold(after_promo_updated)` - `quantity_sold(before_promo)`)) / SUM(`quantity_sold(before_promo)`) AS incremental_units_sold_percentage
    FROM fact_events
    JOIN dim_products USING (product_code)
    WHERE campaign_id="CAMP_DIW_01"
    GROUP BY category
)
SELECT 
    category,
    incremental_units_sold_percentage,
    RANK() OVER (ORDER BY incremental_units_sold_percentage DESC) AS ranking
FROM Top_category;
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Request 5:
Top 5 products by Increments Revenue %

SELECT product_name,
       ROUND((SUM(`Rev_after_promo`-`Rev_before_promo`)/SUM(`Rev_before_promo`))*100,2)
       AS incremental_revenue_percentage
FROM fact_events
JOIN dim_products USING (product_code)
GROUP BY product_name
ORDER BY incremental_revenue_percentage DESC
LIMIT 5;

